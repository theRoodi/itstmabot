const TelegramBot = require('node-telegram-bot-api');
const { Client } = require('pg');

const adminIds = [6705013765, 379802426]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

 
const token = process.env.TG_BOT_ID;
const bot = new TelegramBot(token, { polling: true });

const dbClient = new Client({
    user: process.env.DB_USERNAME,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASS,
    port: process.env.DC_PORT, 
});

dbClient.connect();

function isAdmin(chatId) {
    return adminIds.includes(chatId);
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
function showMainMenu(chatId) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task' },
                    { text: '–õ–∏–¥–µ—Ä–±–æ—Ä–¥', callback_data: 'leaderboard' }
                ],
                [
                    { text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', options);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    showMainMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'task') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        const task = await getRandomTask(chatId);
        if (!task) {
            bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.');
        } else {
            bot.sendMessage(chatId, `–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.description}. –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å ${task.points} –æ—á–∫–æ–≤.`);
        }
    } else if (data === 'leaderboard') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        const res = await dbClient.query(`
            SELECT name, score 
            FROM users 
            ORDER BY score DESC 
            LIMIT 10
        `);
        let leaderboardMessage = 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ üèÜ\n\n';
        res.rows.forEach((user, index) => {
            leaderboardMessage += `${index + 1}. ${user.name} ‚Äî ${user.score} –æ—á–∫–æ–≤\n`;
        });
        bot.sendMessage(chatId, leaderboardMessage);
    } else if (data === 'profile') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRes = await dbClient.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
        const user = userRes.rows[0];
        if (user) {
            bot.sendMessage(chatId, `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: ${user.name}\n–û—á–∫–∏: ${user.score}`);
        } else {
            bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
        }
    }

    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    bot.answerCallbackQuery(callbackQuery.id);
});


bot.onText(/\/addtask (.+) \| (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (!isAdmin(chatId)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }

    const description = match[1];
    const points = parseInt(match[2]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
        await dbClient.query('INSERT INTO tasks (description, points) VALUES ($1, $2)', [description, points]);
        bot.sendMessage(chatId, `–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û–ø–∏—Å–∞–Ω–∏–µ: "${description}", –û—á–∫–∏: ${points}`);
    } catch (err) {
        console.error(err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.');
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª
async function getRandomTask(chatId) {
    const res = await dbClient.query(`
        SELECT * FROM tasks 
        WHERE id NOT IN (
            SELECT task_id FROM completed_tasks WHERE chat_id = $1
        ) 
        ORDER BY RANDOM() LIMIT 1
    `, [chatId]);
    return res.rows[0];
}

// –í—ã–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
bot.onText(/\/task/, async (msg) => {
    const chatId = msg.chat.id;
    const userName = `${msg.from.first_name} ${msg.from.last_name}` || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const task = await getRandomTask(chatId);
    
    if (!task) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.');
        return;
    }
    
    bot.sendMessage(chatId, `–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.description}. –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å ${task.points} –æ—á–∫–æ–≤.`);
    
    await dbClient.query(
        'INSERT INTO users (chat_id, score, name) VALUES ($1, 0, $2) ON CONFLICT (chat_id) DO NOTHING',
        [chatId, userName]
    );
    
    await dbClient.query(
        'UPDATE users SET current_task = $1 WHERE chat_id = $2',
        [task.id, chatId]
    );
});

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
bot.onText(/\/done/, async (msg) => {
    const chatId = msg.chat.id;

    const userRes = await dbClient.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
    const user = userRes.rows[0];

    if (!user || !user.current_task) {
        bot.sendMessage(chatId, '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.');
        return;
    }

    const taskRes = await dbClient.query('SELECT * FROM tasks WHERE id = $1', [user.current_task]);
    const task = taskRes.rows[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    await dbClient.query('INSERT INTO completed_tasks (chat_id, task_id) VALUES ($1, $2)', [chatId, task.id]);

    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    await dbClient.query('UPDATE users SET score = score + $1, current_task = NULL WHERE chat_id = $2', [task.points, chatId]);

    bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª ${task.points} –æ—á–∫–æ–≤. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${user.score + task.points} –æ—á–∫–æ–≤.`);
});


// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.onText(/\/score/, async (msg) => {
    const chatId = msg.chat.id;

    // –ó–∞–ø—Ä–æ—Å–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
    const res = await dbClient.query(`
        SELECT name, score 
        FROM users 
        ORDER BY score DESC 
        LIMIT 10
    `);

    if (res.rows.length === 0) {
        bot.sendMessage(chatId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞.');
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º
    let leaderboardMessage = 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ üèÜ\n\n';
    res.rows.forEach((user, index) => {
        leaderboardMessage += `${index + 1}. ${user.name} ‚Äî ${user.score} –æ—á–∫–æ–≤\n`;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(chatId, leaderboardMessage);
});
