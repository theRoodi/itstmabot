const TelegramBot = require('node-telegram-bot-api');
const { Client } = require('pg');

const adminIds = [6705013765, 379802426]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤


const token = process.env.TG_BOT_ID;
const bot = new TelegramBot(token, { polling: true });

const dbClient = new Client({
    user: process.env.DB_USERNAME,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASS,
    port: process.env.DC_PORT, 
});

dbClient.connect();

function isAdmin(chatId) {
    return adminIds.includes(chatId);
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
function showMainMenu(chatId) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'get_task' },
                    { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'complete_task' }
                ],
                [
                    { text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                    { text: '–õ–∏–¥–µ—Ä–±–æ—Ä–¥', callback_data: 'leaderboard' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', options);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    showMainMenu(chatId);
});

bot.onText(/\/addtask (.+) \| (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (!isAdmin(chatId)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }

    const description = match[1];
    const points = parseInt(match[2]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
        await dbClient.query('INSERT INTO tasks (description, points) VALUES ($1, $2)', [description, points]);
        bot.sendMessage(chatId, `–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û–ø–∏—Å–∞–Ω–∏–µ: "${description}", –û—á–∫–∏: ${points}`);
    } catch (err) {
        console.error(err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.');
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª
async function getRandomTask(chatId) {
    const res = await dbClient.query(`
        SELECT * FROM tasks 
        WHERE id NOT IN (
            SELECT task_id FROM completed_tasks WHERE chat_id = $1
        ) 
        ORDER BY RANDOM() LIMIT 1
    `, [chatId]);
    return res.rows[0];
}

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'get_task') {
        const task = await getRandomTask(chatId);
        if (!task) {
            bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.');
        } else {
            bot.sendMessage(chatId, `–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.description}. –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å ${task.points} –æ—á–∫–æ–≤.`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await dbClient.query('UPDATE users SET current_task = $1, waiting_for_answer = FALSE WHERE chat_id = $2', [task.id, chatId]);
        }
    } else if (data === 'complete_task') {
        // bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.');
        const userRes = await dbClient.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
        const user = userRes.rows[0];

        if (!user || !user.current_task) {
            bot.sendMessage(chatId, '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã–º!');
            return;
        }

        const taskRes = await dbClient.query('SELECT * FROM tasks WHERE id = $1', [user.current_task]);
        const task = taskRes.rows[0];

        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await dbClient.query('UPDATE users SET waiting_for_answer = TRUE WHERE chat_id = $1', [chatId]);
        let message = '–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" –∏ ';
        if (task.answer_type === 'image') {
            message += '–æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
        } else {
            message += '–≤–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.';
        }

        // const options = {
        //     reply_markup: {
        //         inline_keyboard: [[
        //             { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'send_answer' }
        //         ]]
        //     }
        // };
        // bot.sendMessage(chatId, message, options);




    } else if (data === 'send_answer') {
        // –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç');
    } else if (data === 'leaderboard') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        const res = await dbClient.query(`
            SELECT name, score 
            FROM users 
            ORDER BY score DESC 
            LIMIT 10
        `);
        let leaderboardMessage = 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ üèÜ\n\n';
        res.rows.forEach((user, index) => {
            leaderboardMessage += `${index + 1}. ${user.name} ‚Äî ${user.score} –æ—á–∫–æ–≤\n`;
        });
        bot.sendMessage(chatId, leaderboardMessage);
    } else if (data === 'profile') {
        // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRes = await dbClient.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
        const user = userRes.rows[0];
        if (user) {
            bot.sendMessage(chatId, `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: ${user.name}\n–û—á–∫–∏: ${user.score}`);
        } else {
            bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
        }
    } else if (data === 'menu') { 
        showMainMenu(chatId);
    }

    if (data.startsWith('approve_') || data.startsWith('reject_')) {
        const taskId = data.split('_')[1];
        const isApproved = data.startsWith('approve_');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await dbClient.query('UPDATE completed_tasks SET is_approved = $1 WHERE id = $2', [isApproved, taskId]);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const taskRes = await dbClient.query('SELECT chat_id, task_id FROM completed_tasks WHERE id = $1', [taskId]);
        const { chat_id: userChatId, task_id } = taskRes.rows[0];

        if (isApproved) {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const taskPointsRes = await dbClient.query('SELECT points FROM tasks WHERE id = $1', [task_id]);
            const points = taskPointsRes.rows[0].points;

            await dbClient.query('UPDATE users SET score = score + $1 WHERE chat_id = $2', [points, userChatId]);
            bot.sendMessage(userChatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –¢—ã –ø–æ–ª—É—á–∏–ª ${points} –æ—á–∫–æ–≤.`);
        } else {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot.sendMessage(userChatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');

            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –ø–æ–ª–µ current_task –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            await dbClient.query('UPDATE users SET waiting_for_answer = FALSE WHERE chat_id = $1', [userChatId]);
        }

        bot.answerCallbackQuery(callbackQuery.id, { text: isApproved ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.' });
    }

    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    bot.answerCallbackQuery(callbackQuery.id);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRes = await dbClient.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
    const user = userRes.rows[0];

    if (!user || !user.current_task || !user.waiting_for_answer) {
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    const taskRes = await dbClient.query('SELECT * FROM tasks WHERE id = $1', [user.current_task]);
    const task = taskRes.rows[0];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
    if (task.answer_type === 'image') {
        if (msg.photo) {
            const fileId = msg.photo[msg.photo.length - 1].file_id;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω–æ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            await dbClient.query('INSERT INTO completed_tasks (chat_id, task_id, response_file_id, is_approved) VALUES ($1, $2, $3, NULL)', [chatId, task.id, fileId]);
            await dbClient.query('UPDATE users SET current_task = NULL, waiting_for_answer = FALSE WHERE chat_id = $1', [chatId]);

            bot.sendMessage(chatId, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –û–∂–∏–¥–∞–π –Ω–∞–≥—Ä–∞–¥—É.');
        } else {
            bot.sendMessage(chatId, '–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.');
        }
    } else if (task.answer_type === 'text') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...
        const userResponse = msg.text;
        if (userResponse && userResponse.toLowerCase() === task.correct_answer.toLowerCase()) {
            await dbClient.query('UPDATE users SET score = score + $1, current_task = NULL, waiting_for_answer = FALSE WHERE chat_id = $2', [task.points, chatId]);
            await dbClient.query('INSERT INTO completed_tasks (chat_id, task_id) VALUES ($1, $2)', [chatId, task.id]);

            bot.sendMessage(chatId, `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª ${task.points} –æ—á–∫–æ–≤.`);
        } else {
            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.');
        }
    }
});
bot.onText(/\/review_images/, async (msg) => {
    const chatId = msg.chat.id;

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const pendingRes = await dbClient.query('SELECT * FROM completed_tasks WHERE is_approved IS NULL');

    if (pendingRes.rows.length === 0) {
        bot.sendMessage(chatId, '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        return;
    }

    for (const task of pendingRes.rows) {
        const userRes = await dbClient.query('SELECT name FROM users WHERE chat_id = $1', [task.chat_id]);
        const username = userRes.rows[0] ? userRes.rows[0].name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        const options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_${task.id}` }],
                    [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${task.id}` }]
                ]
            }
        };
        bot.sendPhoto(chatId, task.response_file_id);
        bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n–ó–∞–¥–∞–Ω–∏–µ ID: ${task.task_id}`, options);
    }
}); 
 


// bot.on('message', async (msg) => {
//     const chatId = msg.chat.id;
//     const userResponse = msg.text;

//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
//     const userRes = await dbClient.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
//     const user = userRes.rows[0];

//     if (!user || !user.current_task || !user.waiting_for_answer) {
//         return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     }

//     // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
//     const taskRes = await dbClient.query('SELECT * FROM tasks WHERE id = $1', [user.current_task]);
//     const task = taskRes.rows[0];

//     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
//     if (userResponse.toLowerCase() === task.correct_answer.toLowerCase()) {
//         // –û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
//         await dbClient.query('UPDATE users SET score = score + $1, current_task = NULL, waiting_for_answer = FALSE WHERE chat_id = $2', [task.points, chatId]);
//         await dbClient.query('INSERT INTO completed_tasks (chat_id, task_id) VALUES ($1, $2)', [chatId, task.id]);

//         bot.sendMessage(chatId, `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª ${task.points} –æ—á–∫–æ–≤. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${user.score + task.points} –æ—á–∫–æ–≤.`);
//         const options = {
//             reply_markup: {
//                 inline_keyboard: [[
//                     { text: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'menu' }
//                 ]]
//             }
//         };
//         bot.sendMessage(chatId, '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É', options);
//     } else {
//         // –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
//         bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
//     } 
// });