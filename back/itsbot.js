const TelegramBot = require('node-telegram-bot-api');
const { Client } = require('pg');
require('dotenv').config()

const adminIds = [6705013765, 379802426, 6611272818]; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ 


const token = process.env.TG_BOT_ID;
const bot = new TelegramBot(token, { polling: true });

const dbClient = new Client({
    user: process.env.DB_USERNAME,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASS,
    port: process.env.DC_PORT,
});

dbClient.connect();

function isAdmin(chatId) {
    return adminIds.includes(chatId);
}

function getBallaWord(cost) {
    if (cost % 10 === 1 && cost % 100 !== 11) {
        return '–±–∞–ª–ª';
    } else if ((cost % 10 >= 2 && cost % 10 <= 4) && (cost % 100 < 12 || cost % 100 > 14)) {
        return '–±–∞–ª–ª–∞';
    } else {
        return '–±–∞–ª–ª–æ–≤';
    }
}

const mainMenu = {
    reply_markup: {
        keyboard: [
            [{ text: '–ó–∞–¥–∞–Ω–∏—è' }, { text: '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤' }],
            [{ text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }, { text: '–ü–æ–º–æ—â—å' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const adminMenu = {
    reply_markup: {
        keyboard: [
            [{ text: '–ó–∞–¥–∞–Ω–∏—è' }, { text: '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤' }],
            [{ text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }, { text: '–ü–æ–º–æ—â—å' }],
            [{ text: '–ì—Ä—É–ø–ø—ã' }, { text: '–¢–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞' }],
            [{ text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";  // –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    const firstName = msg.from.first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastName = msg.from.last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"; // –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { rows } = await dbClient.query('SELECT * FROM users WHERE user_id = $1', [chatId]);

        if (rows.length === 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
            await dbClient.query(
                `INSERT INTO users (user_id, username, first_name, last_name, points) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [chatId, username, firstName, lastName, 0]
            );
            bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}!`, isAdmin(chatId) ? adminMenu : mainMenu);
        } else {
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.sendMessage(chatId, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}!`, isAdmin(chatId) ? adminMenu : mainMenu);
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.');
    }
});







// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–ó–∞–¥–∞–Ω–∏—è"
        if (msg.text === '–ó–∞–¥–∞–Ω–∏—è') {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if (isAdmin(chatId)) {
                return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'add_task' }],
                            [{ text: 'üë• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'add_group_task' }],
                            [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'check_task' }]
                        ]
                    }
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
            const { rows } = await dbClient.query(
                `SELECT group_id FROM users WHERE user_id = $1 AND is_leader = true`,
                [chatId]
            );

            if (rows[0]?.group_id) {
                return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'get_task' }],
                            [{ text: 'üë• –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'get_group_task' }],
                            [{ text: 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'send_answer' }],
                            [{ text: '‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_status' }]
                        ]
                    }
                });
            }

            // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'get_task' }],
                        [{ text: 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'send_answer' }],
                        [{ text: '‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_status' }]
                    ]
                }
            });
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});


bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    if (msg.text === '–ì—Ä—É–ø–ø—ã') {
        try {
            if (isAdmin(chatId)) {
                // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                bot.sendMessage(chatId, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –≥—Ä—É–ø–ø–∞–º–∏:', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data: 'create_group' },
                                { text: 'üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É', callback_data: 'add_group' }
                            ],
                            [
                                { text: 'üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data: 'change_group' },
                                { text: '‚≠ê –ù–∞–∑–Ω–∞—á–∏—Ç—å –ª–∏–¥–µ—Ä–∞', callback_data: 'assign_leader' }
                            ],
                            [{ text: 'üé≤ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback_data: 'roulette_group' }]
                        ]
                    }
                });
            } else {
                // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.sendMessage(chatId, '‚ÑπÔ∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!');
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é –≥—Ä—É–ø–ø: ${error.message}`);
            bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã "–ì—Ä—É–ø–ø—ã". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    if (msg.text === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') {
        try {
            if (isAdmin(chatId)) {
                // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                bot.sendMessage(chatId, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data: 'send_msg' }
                            ]
                        ]
                    }
                });
            } else {
                // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.sendMessage(chatId, '‚ÑπÔ∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!');
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é –≥—Ä—É–ø–ø: ${error.message}`);
            bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã "–ì—Ä—É–ø–ø—ã". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥–º–µ–Ω—é
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.message.from.id;
    const data = callbackQuery.data; 
    if (data === 'get_task') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
    
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const userCurTask = await dbClient.query(
                `SELECT current_task, current_group_task 
                 FROM users 
                 WHERE user_id = $1`,
                [chatId]
            );
    
            if (userCurTask.rows[0]?.current_task || userCurTask.rows[0]?.current_group_task) {
                return bot.sendMessage(chatId, '–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ.');
            }
    
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            const tasksResult = await dbClient.query(
                `SELECT t.id, t.task_text, t.points, t.response_type, t.parent_task_id, t.task_title
                 FROM tasks t
                 WHERE t.id NOT IN (
                    SELECT task_id 
                    FROM user_answers 
                    WHERE user_id = $1 AND status = 'completed'
                 ) 
                 AND (
                    t.parent_task_id IS NULL OR 
                    t.parent_task_id IN (
                        SELECT task_id 
                        FROM user_answers 
                        WHERE user_id = $1 AND status = 'completed'
                    )
                 )
                 ORDER BY t.id LIMIT 20`,
                [chatId]
            );
    
            if (tasksResult.rows.length === 0) {
                return bot.sendMessage(chatId, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
            }
    
            // –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
            const inlineKeyboard = tasksResult.rows.map(task => { 
                
                let imgTask = ''; // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—É—Å—Ç–∞—è)
    
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç response_type
                switch (task.response_type) {
                    case 'text':
                        imgTask = 'üìù';
                        break;
                    case 'image':
                        imgTask = 'üì∏';
                        break;
                    case 'audio':
                        imgTask = 'üéµ';
                        break;
                    case 'video':
                        imgTask = 'üìπ';
                        break;
                    default:
                        imgTask = '‚ùì';
                }
    
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "–ü–æ–¥–∑–∞–¥–∞–Ω–∏–µ", –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏–º–µ–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                const prefix = task.parent_task_id ? 'üîπ:' : '';
    
                return [{
                    text: `${prefix} ${imgTask} ${task.task_title.slice(0, 50)} (${task.points} ${getBallaWord(task.points)})`,
                    callback_data: `select_task_${task.id}`
                }];
            });
    
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', {
                reply_markup: {
                    inline_keyboard: inlineKeyboard
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π.');
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    if (data.startsWith('select_task_')) {
        const taskId = data.split('_')[2]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è
    
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            const taskResult = await dbClient.query(
                'SELECT task_text, points FROM tasks WHERE id = $1',
                [taskId]
            );
    
            if (taskResult.rows.length === 0) {
                return bot.sendMessage(chatId, '–ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
            }
    
            const task = taskResult.rows[0];
    
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await dbClient.query(
                'UPDATE users SET current_task = $1 WHERE user_id = $2',
                [taskId, chatId]
            );
    
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.sendMessage(chatId, `–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.task_text}\n–ù–∞–≥—Ä–∞–¥–∞: ${task.points} ${getBallaWord(task.points)}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'send_answer' }],
                        [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'cancel_task' }]
                    ]
                }
            });
    
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞–Ω–∏—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞–Ω–∏—è.');
        }
    } 
    else if (data === 'get_group_task') {

        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const userCurTask = await dbClient.query(
                `SELECT current_group_task, current_task 
                 FROM users 
                 WHERE user_id = $1`,
                [chatId]
            );

            if (userCurTask.rows[0]?.current_group_task || userCurTask.rows[0]?.current_task) {
                return bot.sendMessage(chatId, '–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ.');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
            const tasksResult = await dbClient.query(
                `SELECT id, task_text, points, response_type, task_title
                 FROM group_tasks 
                 WHERE id NOT IN (
                    SELECT task_id 
                    FROM group_task_answers 
                    WHERE leader_id = $1 AND status = 'completed'
                 ) 
                 ORDER BY id LIMIT 20`, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
                [chatId]
            );

            if (tasksResult.rows.length === 0) {
                return bot.sendMessage(chatId, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
            }


            // –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
            const inlineKeyboard = tasksResult.rows.map(task => {
                let imgTask = ''; // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—É—Å—Ç–∞)

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç response_type
                switch (task.response_type) {
                    case 'text':
                        imgTask = 'üìù'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                        break;
                    case 'image':
                        imgTask = 'üì∏'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        break;
                    case 'audio':
                        imgTask = 'üéµ'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∞—É–¥–∏–æ
                        break;
                    case 'video':
                        imgTask = 'üìπ'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ
                        break;
                    default:
                        imgTask = '‚ùì'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
                }
                return [{
                    text: `${imgTask} ${task.task_title.slice(0, 50)} (${task.points} ${getBallaWord(task.points)})`,
                    callback_data: `select_group_task_${task.id}`
                }]
            });

            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ø–∏—Å–∫–∞:', {
                reply_markup: {
                    inline_keyboard: inlineKeyboard
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π.');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
    if (data.startsWith('select_group_task_')) {
        const taskId = data.split('_')[3]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            const taskResult = await dbClient.query(
                'SELECT task_text, points FROM group_tasks WHERE id = $1',
                [taskId]
            );

            if (taskResult.rows.length === 0) {
                return bot.sendMessage(chatId, '–ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
            }

            const task = taskResult.rows[0];

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await dbClient.query(
                'UPDATE users SET current_group_task = $1 WHERE user_id = $2',
                [taskId, chatId]
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.sendMessage(chatId, `–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${task.task_text}\n–ù–∞–≥—Ä–∞–¥–∞: ${task.points} ${getBallaWord(task.points)}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'send_answer' }],
                        [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'cancel_task' }]
                    ]
                }
            });

            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞–Ω–∏—è.');
        }
    }

    else if (data === 'send_answer') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const curTask = await dbClient.query(
            'SELECT * FROM tasks WHERE id = (SELECT current_task FROM users WHERE user_id = $1)',
            [chatId]
        );
        const groupTask = await dbClient.query(
            'SELECT * FROM group_tasks WHERE id = (SELECT current_group_task FROM users WHERE user_id = $1)',
            [chatId]
        );

        const curTaskStatus = await dbClient.query(
            'SELECT status, answer FROM user_answers WHERE user_id = $1',
            [chatId]
        );
        const curGroupTaskStatus = await dbClient.query(
            'SELECT status, answer, media_type FROM group_task_answers WHERE leader_id = $1',
            [chatId]
        );
        console.log(curTask.rows);
        console.log(groupTask.rows);
        
        if (curTask.rows.length < 1 && groupTask.rows.length < 1) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.');
        } else if (curTaskStatus.rows.some(item => item.status === 'pending')) {
            const answer = curTaskStatus.rows.find(item => item.status === 'pending' && item.media_type === 'text')?.answer || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª';
            return bot.sendMessage(chatId, `–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–≤–µ—Ç: ${answer}`);
        } else if (curGroupTaskStatus.rows.some(item => item.status === 'pending')) {
            const answer = curGroupTaskStatus.rows.find(item => item.status === 'pending' && item.media_type === 'text')?.answer || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª';
            return bot.sendMessage(chatId, `–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–≤–µ—Ç: ${answer}`);
        }


        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data: 'cancel_task' }]
                ]
            }
        });


        // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ç–≤–µ—Ç
        bot.once('message', async (msg) => {
            try {

                const taskRes = await dbClient.query(
                    'SELECT * FROM tasks WHERE id = (SELECT current_task FROM users WHERE user_id = $1)',
                    [chatId]
                );
                const groupRes = await dbClient.query(
                    'SELECT * FROM group_tasks WHERE id = (SELECT current_group_task FROM users WHERE user_id = $1)',
                    [chatId]
                );

                if (curTask.rows.length < 1 && groupRes.rows.length < 1) {
                    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.');
                    return;
                }

                const task = taskRes.rows[0] ? taskRes.rows[0] : groupRes.rows[0];
                const taskId = task.id
                const answer = msg.text;
                const media_type = task.response_type
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                let responseFileId = null;
                if (task.response_type === 'text') {
                    if (!msg.text) {
                        return bot.sendMessage(chatId, '–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                    }
                    if (task.is_group) {
                        try {
                            await dbClient.query(
                                'INSERT INTO group_task_answers (leader_id, task_id, answer, media_type, status, is_group) VALUES ($1, $2, $3, $4, $5, $6)',
                                [chatId, taskId, answer, media_type, 'pending', true]
                            );

                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                                chat_id: callbackQuery.message.chat.id,
                                message_id: callbackQuery.message.message_id
                            }).catch((err) => {
                                if (err.response && err.response.body && err.response.body.description.includes('message is not modified')) {
                                    console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –ø—É—Å—Ç–∞—è, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
                                } else {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', err);
                                }
                            });
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    } else {
                        try {
                            await dbClient.query(
                                'INSERT INTO user_answers (user_id, task_id, answer, media_type, status) VALUES ($1, $2, $3, $4, $5)',
                                [chatId, taskId, answer, media_type, 'pending']
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                                chat_id: callbackQuery.message.chat.id,
                                message_id: callbackQuery.message.message_id
                            }).catch((err) => {
                                if (err.response && err.response.body && err.response.body.description.includes('message is not modified')) {
                                    console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –ø—É—Å—Ç–∞—è, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
                                } else {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', err);
                                }
                            });
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    }
                }else if (task.response_type === 'image') {
                    if (!msg.photo) {
                        return bot.sendMessage(chatId, '–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
                    }
                    responseFileId = msg.photo[msg.photo.length - 1].file_id;
                    if (task.is_group) {
                        try {
                            await dbClient.query(
                                'INSERT INTO group_task_answers (leader_id, task_id, answer, media_type, status, is_group) VALUES ($1, $2, $3, $4, $5, $6)',
                                [chatId, taskId, responseFileId, 'image', 'pending', true]
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    } else {
                        try {
                            await dbClient.query(
                                'INSERT INTO user_answers (user_id, task_id, answer, media_type, status) VALUES ($1, $2, $3, $4, $5)',
                                [chatId, taskId, responseFileId, 'image', 'pending']
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    }
                } else if (task.response_type === 'audio') {
                    if (!msg.voice) {
                        return bot.sendMessage(chatId, '–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ.');
                    }
                    responseFileId = msg.voice.file_id;
                    if (task.is_group) {
                        try {
                            await dbClient.query(
                                'INSERT INTO group_task_answers (leader_id, task_id, answer, media_type, status, is_group) VALUES ($1, $2, $3, $4, $5, $6)',
                                [chatId, taskId, responseFileId, 'audio', 'pending', true]
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    } else {
                        try {
                            await dbClient.query(
                                'INSERT INTO user_answers (user_id, task_id, answer, media_type, status) VALUES ($1, $2, $3, $4, $5)',
                                [chatId, taskId, responseFileId, 'audio', 'pending']
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    }
                } else if (task.response_type === 'video') {
                    if (!msg.video) {
                        return bot.sendMessage(chatId, '–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ.');
                    }
                    responseFileId = msg.video.file_id;
                    if (task.is_group) {
                        try {
                            await dbClient.query(
                                'INSERT INTO group_task_answers (leader_id, task_id, answer, media_type, status, is_group) VALUES ($1, $2, $3, $4, $5, $6)',
                                [chatId, taskId, responseFileId, 'video', 'pending', true]
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    } else {
                        try {
                            await dbClient.query(
                                'INSERT INTO user_answers (user_id, task_id, answer, media_type, status) VALUES ($1, $2, $3, $4, $5)',
                                [chatId, taskId, responseFileId, 'video', 'pending']
                            );
                            bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
                        }
                    }
                }
                

            } catch (error) {
                console.error(error);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.');
            }
        });
    } else if (data === 'task_status') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
        const taskRes = await dbClient.query(
            'SELECT tasks.task_text FROM tasks JOIN users ON tasks.id = users.current_task WHERE users.user_id = $1',
            [chatId]
        );
        const groupRes = await dbClient.query(
            'SELECT task_text FROM group_tasks JOIN users ON group_tasks.id = users.current_group_task WHERE users.user_id = $1',
            [chatId]
        );
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è 

        bot.sendMessage(chatId, `${taskRes.rows[0]?.task_text ? taskRes.rows[0]?.task_text : groupRes.rows[0]?.task_text ? groupRes.rows[0].task_text : '–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç'}`);
    } else if (data === 'cancel_task') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
        try {
            // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await dbClient.query(
                'UPDATE users SET current_task = NULL, current_group_task = NULL WHERE user_id = $1',
                [chatId]
            );
            bot.sendMessage(chatId, '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞–Ω–∏—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞–Ω–∏—è.');
        }
    }


    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤"
bot.onText(/–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤/, async (msg) => {
    const chatId = msg.chat.id;

    const leaderOptions = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'user_leaders' },
                    { text: '–ì—Ä—É–ø–ø—ã', callback_data: 'group_leaders' }
                ]
            ]
        }
    };
    bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤', leaderOptions);

});
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'user_leaders') {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try {
            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–ª–ª–æ–≤
            const res = await dbClient.query(
                `SELECT first_name, last_name, points 
                 FROM users 
                 ORDER BY points DESC 
                 LIMIT 10`
            );

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–¥–µ—Ä–∞–º–∏
            if (res.rows.length > 0) {
                let leaderboard = 'üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–ª–∞–º üèÜ\n\n';
                res.rows.forEach((user, index) => {
                    const ballWord = getBallaWord(user.points);
                    let name = `${user.first_name} ${user.last_name}`
                    leaderboard += `${index + 1}. ${name || '–ê–Ω–æ–Ω–∏–º'} - ${user.points} ${ballWord}\n`;
                });
                bot.sendMessage(chatId, leaderboard);
            } else {
                bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –±–∞–ª–ª–æ–≤.');
            }
        } catch (error) {
            console.error(error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤.');
        }
        bot.deleteMessage(chatId, callbackQuery.message.message_id).catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        });
    }
    if (data === 'group_leaders') {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å—Ä–µ–¥–∏ –≥—Ä—É–ø–ø
        try {
            const result = await dbClient.query(
                `SELECT name, points
                 FROM groups
                 ORDER BY points DESC
                 LIMIT 10`
            );

            if (result.rows.length === 0) {
                return bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö.');
            }

            let response = 'üèÜ –¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ —Å—Ä–µ–¥–∏ –≥—Ä—É–ø–ø:\n\n';
            result.rows.forEach((group, index) => {
                const ballWord = getBallaWord(group.points);
                response += `${index + 1}. ${group.name} ‚Äî ${group.points} ${ballWord}\n`;
            });

            bot.sendMessage(chatId, response);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ –≥—Ä—É–ø–ø:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ –≥—Ä—É–ø–ø.');
        }
        bot.deleteMessage(chatId, callbackQuery.message.message_id).catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        });
    }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
bot.onText(/–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const res = await dbClient.query(
            `SELECT user_id, first_name, last_name, points, secret_santa, groupname, is_leader, santa_for
             FROM users 
             WHERE user_id = $1`,
            [chatId]
        );
        const santa_user = await dbClient.query(
            `SELECT first_name, last_name
             FROM users 
             WHERE user_id = $1`,
            [res.rows[0].santa_for]
        ) 
        
        
        if (res.rows.length > 0) {
            const user = res.rows[0];
            const fullName = `${user.first_name} ${user.last_name}`;
            const points = user.points;
            const group = user.groupname || '–ù–µ—Ç –≥—Ä—É–ø–ø—ã';
            const santaStatus = user.secret_santa ? '–î–∞' : '–ù–µ—Ç';
            const isLeader = user.is_leader
            const santaFor = user.secret_santa && santa_user.rows.length > 0 ? `–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è <tg-spoiler>${santa_user.rows[0].first_name} ${santa_user.rows[0].last_name}</tg-spoiler>` : '';


            const ballWord = getBallaWord(points);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const groupLeader = isLeader ? '–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã: –î–∞' : ''
            const profileMessage =
                `üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n` +
                `–ü–æ–ª–Ω–æ–µ –∏–º—è: ${fullName}\n` +
                `–ë–∞–ª–ª—ã: ${points} ${ballWord}\n` +
                `–£—á–∞—Å—Ç–≤—É—é –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ: ${santaStatus}\n` +
                `${santaFor}\n` +
                `–ì—Ä—É–ø–ø–∞: ${group}\n` +
                `${groupLeader}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            bot.sendMessage(chatId, profileMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [ { text: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'change_name' } ],
                        [ { text: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–æ–≤', callback_data: 'my_reservations' },]
                    ]
                },
                parse_mode: 'HTML'
            });
        } else {
            bot.sendMessage(chatId, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

bot.on('message', (msg) => {
    if (msg.text === '–¢–∞–π–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞') {
        const chatId = msg.chat.id;
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ó–∞–π—Ç–∏', // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                            web_app: {
                                url: 'https://itstma.vercel.app/', // URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                            },
                        },
                    ],
                ],
            },
        };
        bot.sendMessage(msg.chat.id, '–í–æ—É, –¥–∞ —ç—Ç–æ –∂–µ –Ω–∞—Å—Ç–æ—è—â–∞—è —Ç–∞–π–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞!', keyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞"
bot.on('message', (msg) => {

    if (msg.text === '–¢–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞') {
        const helpMenu = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'send_santa' }],
                    [{ text: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', callback_data: 'roulete_santa' }],
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'status_santa' }]
                ],
            },
        };
        bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ–º–æ—â–∏:', helpMenu);
    }
});



function shuffle(array) {
    let currentIndex = array.length, randomIndex;

    // –ü–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    while (currentIndex !== 0) {
        // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
    }

    return array;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–º–µ–Ω—é "–¢–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞"
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;


    if (data === 'send_santa') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        }).catch((err) => {
            if (err.response && err.response.body && err.response.body.description.includes('message is not modified')) {
                console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –ø—É—Å—Ç–∞—è, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', err);
            }
        });
        bot.sendMessage(chatId, '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
        try {
            const users = await dbClient.query('SELECT user_id FROM users WHERE secret_santa=false');

            if (users.rows.length === 0) {
                console.log('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for (const user of users.rows) {
                const userId = user.user_id;
                await bot.sendMessage(userId, '–•–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ?', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '–£—á–∞—Å—Ç–≤—É—é üéÖ', callback_data: `santa_yes_${userId}` },
                                { text: '–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ ‚ùå', callback_data: `santa_no_${userId}` }
                            ]
                        ]
                    }
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        }
    } else if (data === 'roulete_santa') {
        bot.sendMessage(chatId, '–î–µ–ª–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ
        const users = await dbClient.query('SELECT user_id, first_name FROM users WHERE secret_santa = true');

        if (users.rows.length < 2) {
            return bot.sendMessage(chatId, '–î–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const shuffledUsers = shuffle(users.rows); // –§—É–Ω–∫—Ü–∏—è shuffle –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç
        const assignments = [];
        for (let i = 0; i < shuffledUsers.length; i++) {
            const santa = shuffledUsers[i];
            const receiver = shuffledUsers[(i + 1) % shuffledUsers.length]; // –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º

            assignments.push({
                user_id: santa.user_id,
                santa_id: receiver.user_id
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
            await dbClient.query('BEGIN'); // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            await dbClient.query('DELETE FROM secret_santa');

            // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            for (let assignment of assignments) {
                await dbClient.query(
                    'INSERT INTO secret_santa (user_id, santa_id) VALUES ($1, $2)',
                    [assignment.user_id, assignment.santa_id]
                );
            }

            await dbClient.query('COMMIT'); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

            bot.sendMessage(chatId, '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

            // –û–ø–æ–≤–µ—â–∞–µ–º –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç –æ —Ç–æ–º, –∫–æ–º—É –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
            for (let assignment of assignments) {
                const receiver = await dbClient.query(
                    'SELECT first_name, last_name FROM users WHERE user_id = $1',
                    [assignment.santa_id]
                );
                await dbClient.query(
                    'UPDATE users SET santa_for = $1 WHERE user_id = $2',
                    [assignment.santa_id, assignment.user_id]
                );
                // –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–æ–º—É –æ–Ω –¥–æ–ª–∂–µ–Ω –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
                bot.sendMessage(assignment.user_id, `–¢—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è <tg-spoiler>${receiver.rows[0].first_name} ${receiver.rows[0].last_name}</tg-spoiler>. –£–¥–∞—á–∏!`, { parse_mode: 'HTML' });
                // bot.sendMessage(assignment.user_id, `–¢—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è ${receiver.rows[0].first_name} ${receiver.rows[0].last_name}`);





            }

        } catch (error) {
            await dbClient.query('ROLLBACK'); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            console.error(error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.');
        }


    } else if (data === 'status_santa') {
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        const users = await dbClient.query('SELECT user_id, first_name, last_name FROM users');

        const keyboard = users.rows.map(user => ([
            { text: `${user.first_name} ${user.last_name}`, callback_data: `change_status_${user.user_id}` }
        ]));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã:', {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    }
});
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data.startsWith('change_status_')) {
        const targetUserId = data.split('_')[2]; // –ü–æ–ª—É—á–∞–µ–º user_id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await dbClient.query('SELECT first_name, last_name, secret_santa FROM users WHERE user_id = $1', [targetUserId]);

        if (user.rows.length > 0) {
            const userName = `${user.rows[0].first_name} ${user.rows[0].last_name}`;
            const currentStatus = user.rows[0].secret_santa;

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            const statusKeyboard = [
                [
                    { text: currentStatus ? '–ù–µ —É—á–∞–≤—Å—Ç–≤—É—é' : '–£—á–∞–≤—Å—Ç–≤—É—é', callback_data: `set_santa_status_${targetUserId}_${currentStatus ? 'false' : 'true'}` }
                ]
            ];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞
            bot.sendMessage(chatId, `–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è ${userName}:`, {
                reply_markup: {
                    inline_keyboard: statusKeyboard
                }
            });
        }
    }
});
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data.startsWith('set_santa_status_')) {
        const [, , , targetUserId, newStatus] = data.split('_');
        const newStatusBoolean = newStatus === 'true';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await dbClient.query('UPDATE users SET secret_santa = $1 WHERE user_id = $2', [newStatusBoolean, targetUserId]);
        const user = await dbClient.query('SELECT first_name, last_name FROM users WHERE user_id = $1', [targetUserId]);

        const username = `${user.rows[0].first_name} ${user.rows[0].last_name}`
        // if(newStatusBoolean) {
        //     await dbClient.query('UPDATE users SET points =+2 WHERE user_id = $1', [targetUserId]);
        // }


        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const statusMessage = newStatusBoolean ? '—É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ' : '–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ';
        bot.sendMessage(chatId, `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å ${username} ${statusMessage}.`);
    }
});



bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;

    if (data.startsWith('santa_yes_')) {
        const userId = data.split('_')[2];

        try {
            await dbClient.query('UPDATE users SET secret_santa = true, points =+2 WHERE user_id = $1', [userId]);
            await bot.sendMessage(chatId, '–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É! üéâ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else if (data.startsWith('santa_no_')) {
        const userId = data.split('_')[2];

        try {
            await dbClient.query('UPDATE users SET secret_santa = false WHERE user_id = $1', [userId]);
            await bot.sendMessage(chatId, '–ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –≥–æ–¥—É. üòû');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
bot.on('message', (msg) => {
    if (msg.text === '–ü–æ–º–æ—â—å') {
        const helpMenu = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞', callback_data: 'help_description' },
                        { text: '–ü—Ä–∏–∑—ã', callback_data: 'help_prizes' },
                    ],
                    [
                        { text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'help_question' },
                    ],
                    [
                        { text: '–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'answers' },
                    ],
                ],
            },
        };
        bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ–º–æ—â–∏:', helpMenu);
    }
});

function getBallaWord(cost) {
    if (cost % 10 === 1 && cost % 100 !== 11) {
        return '–±–∞–ª–ª';
    } else if ((cost % 10 >= 2 && cost % 10 <= 4) && (cost % 100 < 12 || cost % 100 > 14)) {
        return '–±–∞–ª–ª–∞';
    } else {
        return '–±–∞–ª–ª–æ–≤';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–º–µ–Ω—é "–ü–æ–º–æ—â—å"
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'help_description') {
        bot.sendMessage(chatId, 
            `*–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:*
            
    1. üìù *–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π* : –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∏–ª–∏ –º–µ–¥–∏–∞-—Ñ–æ—Ä–º–∞—Ç–µ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç).    
    2. üì§ *–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤* : –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –æ—Ç–≤–µ—Ç.\n *–í–∞–∂–Ω–æ, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç".*   
    3. üí∞ *–ë–∞–ª–ª—ã* : –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å".   
    4. üë• *–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è* : –ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã, –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π.   
    5. üéÖ *–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞* : –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ü–∏–∏ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞", —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫ –µ—â–µ –±–æ–ª–µ–µ –≤–µ—Å–µ–ª—ã–º, –∑–∞ —É—á–∞—Å—Ç–∏–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 2 –±–∞–ª–ª–∞!
    6. ‚ùì *–ü–æ–º–æ—â—å* : –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å" > "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É.
    7. üì¢ *–ö–∞–Ω–∞–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* : –í —ç—Ç–æ–º [–∫–∞–Ω–∞–ª–µ](https://t.me/+wulJpMxJlxgyN2Iy) –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.`, 
            { parse_mode: 'Markdown' });
    }
    
     else if (data === 'help_prizes') {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
            const result = await dbClient.query(
                'SELECT id, name, cost, quantity FROM prizes WHERE is_available = $1',
                [true]
            );
    
            if (result.rows.length === 0) {
                return bot.sendMessage(chatId, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–∑—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
            }
    
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await dbClient.query('SELECT points FROM users WHERE user_id = $1', [chatId]);
    
            if (userResult.rows.length === 0) {
                return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –±–∞–ª–ª–∞—Ö.');
            }
    
            const userPoints = userResult.rows[0].points;
    
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑–∞–º–∏
            let prizesMessage = 'üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:\n\n';
            let inlineKeyboard = [];
    
            result.rows.forEach((prize, index) => {
                if (prize.cost <= userPoints && prize.quantity > 0) {
                    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    const button = {
                        text: `${prize.name} (${prize.cost} –±–∞–ª–ª–æ–≤)`,
                        callback_data: `reserve_${prize.id}`,
                    };
                    inlineKeyboard.push([button]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                }
    
                prizesMessage += `${index + 1}. ${prize.name}\n`;
                prizesMessage += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${prize.cost} –±–∞–ª–ª–æ–≤\n`;
                prizesMessage += `–û—Å—Ç–∞–ª–æ—Å—å: ${prize.quantity > 0 ? prize.quantity + ' —à—Ç.' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n\n`;
            });
    
            if (inlineKeyboard.length === 0) {
                prizesMessage += '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–æ–≤.';
            }
            prizesMessage += `\n–í–∞—à –±–∞–ª–∞–Ω—Å: *${userPoints} ${getBallaWord(userPoints)}*`;
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.sendMessage(chatId, prizesMessage, {
                reply_markup: {
                    inline_keyboard: inlineKeyboard 
                },
                parse_mode: 'Markdown'
            });
    
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤.');
        }
    } else if (data === 'answers') {
        bot.sendMessage(chatId, '–í—Ö–æ–¥ –Ω–∞ [–∫–∞–Ω–∞–ª](https://t.me/+wulJpMxJlxgyN2Iy) –∫—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', { parse_mode: 'Markdown' });
    }
});
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    if (data.startsWith('reserve_')) {
        const prizeId = data.split('_')[1];

        try {
            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
            await dbClient.query('BEGIN');

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
            const prizeResult = await dbClient.query(
                'SELECT name, cost, quantity FROM prizes WHERE id = $1 AND is_available = $2',
                [prizeId, true]
            );

            if (prizeResult.rows.length === 0 || prizeResult.rows[0].quantity <= 0) {
                await dbClient.query('ROLLBACK');
                return bot.sendMessage(chatId,'–≠—Ç–æ—Ç –ø—Ä–∏–∑ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.' );
            }

            const prize = prizeResult.rows[0];

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await dbClient.query('SELECT points FROM users WHERE user_id = $1', [userId]); 
            

            if (userResult.rows.length === 0 || userResult.rows[0].points < prize.cost) {
                await dbClient.query('ROLLBACK');
                return bot.sendMessage(chatId,'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.' );
            }

            // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–∞
            await dbClient.query('UPDATE users SET points = points - $1 WHERE user_id = $2', [prize.cost, userId]);
            await dbClient.query('UPDATE prizes SET quantity = quantity - 1 WHERE id = $1', [prizeId]);
            
            //–ö–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await dbClient.query(
                'SELECT user_id, first_name, last_name, points FROM users WHERE user_id = $1',
                [chatId]
            );

            const prizes = await dbClient.query(
                'SELECT name, cost FROM prizes WHERE id = $1',
                [prizeId]
            );

            const points = user.rows[0].points
            const prize_name = prizes.rows[0].name

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É prize_reservations
            await dbClient.query(
                'INSERT INTO prize_reservations (user_id, prize_id, name) VALUES ($1, $2, $3)',
                [userId, prizeId, prize_name]
            );

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await dbClient.query('COMMIT');

            // bot.answerCallbackQuery(query.id, { text: `–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–∑: ${prize.name}`, show_alert: true });
            bot.sendMessage(chatId, `üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ *${prize.name}*!\n–°–ø–∏—Å–∞–ª–∏: *${prize.cost} ${getBallaWord(points)}*.\n–û—Å—Ç–∞–ª–æ—Å—å: *${points} ${getBallaWord(points)}*`, { parse_mode: 'Markdown' });
        } catch (error) {
            await dbClient.query('ROLLBACK');
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞:', error);
            bot.sendMessage(chatId,'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.' );
        }
    }
});





// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å" - "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'help_question') {
        bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');

        // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–ø—Ä–æ—Å)
        bot.once('message', async (msg) => {



            const userId = msg.from.id
            const userQuestion = msg.text;
            const user = await dbClient.query(
                `SELECT * FROM users 
                 WHERE user_id = $1`,
                [userId]
            );


            const name = `${user.rows[0].first_name} ${user.rows[0].last_name ? user.rows[0].last_name : ''}`;
            const username = msg.from.username


            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            const adminChatId = 6705013765;  // –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const questionChat = -1002449625966 // –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤

            const questionMessage = `–í–æ–ø—Ä–æ—Å –æ—Ç @${username} ${name}:\n${userQuestion}`;

            bot.sendMessage(adminChatId, questionMessage); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            bot.sendMessage(questionChat, questionMessage); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            bot.sendMessage(chatId, '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ü´∂üèª. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –õ–°.');
        });
    }
});

const cancelKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
        ]
    }
};

//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'add_task') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
    
        // –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
        const taskTypeKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_main' }],
                    [{ text: '–ü–æ–¥–∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_sub' }],
                ],
            },
        };
    
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', taskTypeKeyboard);
    
        bot.once('callback_query', async (taskTypeQuery) => {
            const taskType = taskTypeQuery.data;
    
            let parentTaskId = null; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    
            // –®–∞–≥ 2: –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∑–∞–¥–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            if (taskType === 'task_sub') {
                const tasksResult = await dbClient.query(
                    'SELECT id, task_text FROM tasks WHERE parent_task_id IS NULL'
                );
    
                if (tasksResult.rowCount === 0) {
                    return bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
                }
    
                const taskButtons = tasksResult.rows.map((task) => [
                    { text: task.task_text, callback_data: `parent_${task.id}` },
                ]);
    
                await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–¥–∑–∞–¥–∞–Ω–∏—è:', {
                    reply_markup: { inline_keyboard: taskButtons },
                });
    
                // –ñ–¥—ë–º –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                const parentTaskQuery = await new Promise((resolve) => {
                    bot.once('callback_query', resolve);
                });
    
                parentTaskId = parseInt(parentTaskQuery.data.replace('parent_', ''), 10);
            }
    
            // –®–∞–≥ 3: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:');
            bot.once('message', async (msg) => {
                const taskText = msg.text;
    
                // –®–∞–≥ 4: –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
                await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:');
                bot.once('message', async (msg) => {
                    const taskPoints = parseInt(msg.text, 10);
    
                    if (isNaN(taskPoints)) {
                        return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–ª–æ–≤.');
                    }
    
                    // –®–∞–≥ 5: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '–¢–µ–∫—Å—Ç ‚úçÔ∏è', callback_data: 'response_type_text' },
                                    { text: '–§–æ—Ç–æ üì∑', callback_data: 'response_type_image' },
                                ],
                                [
                                    { text: '–ê—É–¥–∏–æ üéß', callback_data: 'response_type_audio' },
                                    { text: '–í–∏–¥–µ–æ üìπ', callback_data: 'response_type_video' },
                                ],
                            ],
                        },
                    };
    
                    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', keyboard);
    
                    bot.once('callback_query', async (responseQuery) => {
                        const responseType = responseQuery.data.replace('response_type_', '');
    
                        // –®–∞–≥ 6: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
                        try {
                            await dbClient.query(
                                'INSERT INTO tasks (task_text, points, response_type, parent_task_id) VALUES ($1, $2, $3, $4)',
                                [taskText, taskPoints, responseType, parentTaskId]
                            );
    
                            const message = parentTaskId
                                ? `‚úÖ –ü–æ–¥–∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é!`
                                : `‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!`;
    
                            bot.sendMessage(chatId, message);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
                            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.');
                        }
                    });
                });
            });
        });
    }
     else if (data === 'add_group_task') {
        bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
        });
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:');
        bot.once('message', async (msg) => {
            const taskText = msg.text;

            await bot.sendMessage(msg.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:');
            bot.once('message', async (msg) => {
                const taskPoints = parseInt(msg.text, 10);

                if (isNaN(taskPoints)) {
                    return bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–ª–æ–≤.');
                }

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '–¢–µ–∫—Å—Ç', callback_data: 'response_type_text' },
                                { text: '–§–æ—Ç–æ', callback_data: 'response_type_image' },
                            ],
                            [
                                { text: '–ê—É–¥–∏–æ', callback_data: 'response_type_audio' },
                                { text: '–í–∏–¥–µ–æ', callback_data: 'response_type_video' },
                            ],
                        ],
                    },
                };

                await bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', keyboard);

                bot.once('callback_query', async (responseQuery) => {
                    const responseType = responseQuery.data.replace('response_type_', '');

                    await bot.sendMessage(
                        responseQuery.message.chat.id,
                        `–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—Å—Ç: "${taskText}", –ë–∞–ª–ª—ã: ${taskPoints}, –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: ${responseType}`
                    );
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
                    try {
                        await dbClient.query(
                            'INSERT INTO group_tasks (task_text, points, response_type) VALUES ($1, $2, $3)',
                            [taskText, taskPoints, responseType]
                        );
                        bot.sendMessage(responseQuery.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
                        bot.sendMessage(responseQuery.message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.');
                    }
                });
            });
        });
    } else if (data === 'check_task') {
        bot.deleteMessage(chatId, callbackQuery.message.message_id).catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        });
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è  
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã
            const tasksResult = await dbClient.query(
                `SELECT t.id, t.task_text, ua.answer, u.first_name, u.last_name, u.user_id, ua.media_type
                 FROM tasks t 
                 JOIN user_answers ua ON t.id = ua.task_id
                 JOIN users u ON ua.user_id = u.user_id
                 WHERE ua.status = $1`,
                ['pending']
            );
            const groupResult = await dbClient.query(
                `SELECT t.id, t.task_text, ua.answer, u.first_name, u.last_name, u.user_id, ua.media_type
                 FROM group_tasks t 
                 JOIN group_task_answers ua ON t.id = ua.task_id
                 JOIN users u ON ua.leader_id = u.user_id
                 WHERE ua.status = $1`,
                ['pending']
            );


            if (tasksResult.rows.length < 1 && groupResult.rows.length < 1) {
                return bot.sendMessage(chatId, '–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
            }
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
            const tasks = [...tasksResult.rows, ...groupResult.rows];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for (const task of tasks) {
                const inlineKeyboard = {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_${task.id}_${task.user_id}` }],
                        [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${task.id}_${task.user_id}` }]
                    ]
                };

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
                if (task.media_type === 'text') {
                    await bot.sendMessage(
                        chatId,
                        `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.task_text}\nüìù –û—Ç–≤–µ—Ç: ${task.answer}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.first_name} ${task.last_name}`,
                        { reply_markup: inlineKeyboard }
                    );
                } else if (task.media_type === 'image') {
                    await bot.sendPhoto(
                        chatId,
                        task.answer,
                        {
                            caption: `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.task_text}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.first_name} ${task.last_name}`,
                            reply_markup: inlineKeyboard
                        }
                    );
                } else if (task.media_type === 'audio') {
                    await bot.sendAudio(
                        chatId,
                        task.answer,
                        {
                            caption: `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.task_text}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.first_name} ${task.last_name}`,
                            reply_markup: inlineKeyboard
                        }
                    );
                } else if (task.media_type === 'video') { 

                    await bot.sendVideo(
                        chatId,
                        task.answer,
                        {
                            caption: `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.task_text}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.first_name} ${task.last_name}`,
                            reply_markup: inlineKeyboard
                        }
                    );
                } else {
                    await bot.sendMessage(
                        chatId,
                        `üìã –ó–∞–¥–∞–Ω–∏–µ: ${task.task_text}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.first_name} ${task.last_name}`,
                        { reply_markup: inlineKeyboard }
                    );
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π.');
        }
    } else if (data === 'change_name') {

        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.', cancelKeyboard);

        const nameChangeHandler = async (msg) => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
            bot.removeListener('message', nameChangeHandler);

            if (msg.text === '–û—Ç–º–µ–Ω–∞') {
                bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                return;
            }

            const [firstName, lastName] = msg.text.split(' ');

            try {
                await dbClient.query(
                    `UPDATE users SET first_name = $1, last_name = $2 WHERE user_id = $3`,
                    [firstName, lastName || '', chatId]
                );
                bot.sendMessage(chatId, `–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ${firstName} ${lastName || ''}`);
            } catch (error) {
                console.error(error);
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.');
            }
        };

        // –°–ª—É—à–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, –∏ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–û—Ç–º–µ–Ω–∞", —Ç–æ...
        bot.on('callback_query', async (callbackQuery) => {
            const { data, message } = callbackQuery;

            if (data === 'cancel') {
                bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                bot.removeListener('message', nameChangeHandler); // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
        bot.on('message', nameChangeHandler);
        bot.deleteMessage(chatId, callbackQuery.message.message_id).catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        });
    } else if (data === 'my_reservations') { 
        try {
            const result = await dbClient.query(`
                SELECT p.name AS prize_name, r.reserved_at
                FROM prize_reservations r
                JOIN prizes p ON r.prize_id = p.id
                WHERE r.user_id = $1
                ORDER BY r.reserved_at DESC
            `, [chatId]);
    
            if (result.rows.length === 0) {
                return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ üéÅ\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ! üïê');
            }
    
            let message = 'üéü *–í–∞—à–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:*\n\n';
            result.rows.forEach((row, index) => {
                message += `${index + 1}. ${row.prize_name}\n`;
                message += `üìÖ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date(row.reserved_at).toLocaleString()}\n\n`;
            });
    
            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
        } 
    }
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    bot.answerCallbackQuery(callbackQuery.id);
});


bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    let res = null
    const answerGroup = -1002432645943



    if (isAdmin(chatId)) {
        if (data.startsWith('approve_')) {
            const [_, taskId, userId] = data.split('_');
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const res = await dbClient.query(
                    'SELECT * FROM users WHERE user_id = $1',
                    [userId]
                );
        
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                if (!!res.rows[0].current_task) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        const answerResult = await dbClient.query(
                            'SELECT answer, media_type, task_id FROM user_answers WHERE user_id = $1 AND task_id = $2',
                            [userId, taskId]
                        );
        
                        const userAnswer = answerResult.rows[0];
        
                        // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await dbClient.query(
                            'UPDATE users SET current_task = $3, points = points + (SELECT points FROM tasks WHERE id = $1) WHERE user_id = $2',
                            [taskId, userId, null]
                        );
        
                        await dbClient.query(
                            'UPDATE user_answers SET status = $1 WHERE user_id = $2 AND task_id = $3',
                            ['completed', userId, taskId]
                        );
        
                        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã
                        const taskResult = await dbClient.query(
                            'SELECT task_text, points FROM tasks WHERE id = $1',
                            [taskId]
                        );
        
                        const task = taskResult.rows[0];
                        const username = `${res.rows[0].first_name} ${res.rows[0].last_name}`
        
                        // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
                        bot.sendMessage(chatId, '‚úÖ –û—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
                        bot.sendMessage(userId, 'üéâ –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!');
        
                        // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                        const groupMessage = 
                            `üéâ *–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n` +
                            `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${username}\n` +
                            `üìù *–ó–∞–¥–∞–Ω–∏–µ:* ${task.task_text}\n`; 
                        
                        console.log(userAnswer);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞)
                        if (userAnswer.media_type === 'text') {
                            bot.sendMessage(answerGroup, `${groupMessage}\nüì• *–û—Ç–≤–µ—Ç:* ${userAnswer.answer}`, { parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ñ–æ—Ç–æ
                        else if (userAnswer.media_type === 'image') {
                            bot.sendPhoto(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∏–¥–µ–æ
                        else if (userAnswer.media_type === 'video') {
                            bot.sendVideo(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∞—É–¥–∏–æ
                        else if (userAnswer.media_type === 'audio') {
                            bot.sendAudio(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
                        else if (userAnswer.media_type === 'document') {
                            bot.sendDocument(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
        
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.');
                    }
                } else if (!!res.rows[0].current_group_task) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        const answerResult = await dbClient.query(
                            'SELECT answer, media_type, file_id FROM group_task_answers WHERE leader_id = $1 AND task_id = $2',
                            [userId, res.rows[0].current_group_task]
                        );
        
                        const groupAnswer = answerResult.rows[0];
        
                        // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –≥—Ä—É–ø–ø–µ
                        await dbClient.query(
                            'UPDATE groups SET points = points + (SELECT points FROM group_tasks WHERE id = $2) WHERE id = $1',
                            [res.rows[0].group_id, res.rows[0].current_group_task]
                        );
        
                        await dbClient.query(
                            'UPDATE group_task_answers SET status = $1 WHERE leader_id = $2 AND task_id = $3',
                            ['completed', userId, res.rows[0].current_group_task]
                        );
        
                        await dbClient.query(
                            'UPDATE users SET current_group_task = $2 WHERE user_id = $1',
                            [userId, null]
                        );
        
                        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã
                        const groupTaskResult = await dbClient.query(
                            'SELECT task_text, points FROM group_tasks WHERE id = $1',
                            [res.rows[0].current_group_task]
                        );
                        const answerGroupResult = await dbClient.query(
                            'SELECT answer, media_type, task_id FROM group_task_answers WHERE leader_id = $1 AND task_id = $2',
                            [userId, taskId]
                        );
        
                        const userAnswer = answerGroupResult.rows[0];
        
                        const groupTask = groupTaskResult.rows[0];
                        const username = `${res.rows[0].first_name} ${res.rows[0].last_name}`



                        bot.sendMessage(chatId, '‚úÖ –û—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
                        bot.sendMessage(userId, 'üéâ –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≥—Ä—É–ø–ø–µ!');
                        // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                        const groupMessage = 
                            `üéâ *–û—Ç–≤–µ—Ç –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n` +
                            `üë• *–ì—Ä—É–ø–ø–∞:* ${res.rows[0].groupname}\n` +
                            `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${username}\n` +
                            `üìù *–ó–∞–¥–∞–Ω–∏–µ:* ${groupTask.task_text}\n`; 
                        
                        console.log(userAnswer);
                        console.log(groupTask);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞)
                        if (userAnswer.media_type === 'text') {
                            bot.sendMessage(answerGroup, `${groupMessage}\nüì• *–û—Ç–≤–µ—Ç:* ${userAnswer.answer}`, { parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ñ–æ—Ç–æ
                        else if (userAnswer.media_type === 'image') {
                            bot.sendPhoto(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∏–¥–µ–æ
                        else if (userAnswer.media_type === 'video') {
                            bot.sendVideo(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∞—É–¥–∏–æ
                        else if (userAnswer.media_type === 'audio') {
                            bot.sendAudio(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
                        else if (userAnswer.media_type === 'document') {
                            bot.sendDocument(answerGroup, userAnswer.answer, { caption: `${groupMessage}\n`, parse_mode: 'Markdown' });
                        }
        
        
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
                        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!');
                    }
                } else {
                    bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.');
                }
        
                // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
                bot.deleteMessage(chatId, callbackQuery.message.message_id).catch((err) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                });
        
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è:', error);
                bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.');
            }
        }else if (data.startsWith('reject_')) {
            const [_, taskId, userId] = data.split('_');
            try {
                res = await dbClient.query(
                    'SELECT * FROM users WHERE user_id = $1',
                    [userId]
                );

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è:', error);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.');
            }
            if (!!res.rows[0].current_task) {
                try {
                    await dbClient.query(
                        'DELETE FROM user_answers WHERE user_id = $1 AND task_id = $2',
                        [userId, taskId]
                    );
                    bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ó–∞–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.');
                    bot.sendMessage(userId, '–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç.');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.');
                }
            } else if (!!res.rows[0].current_group_task) {
                try {
                    await dbClient.query(
                        'DELETE FROM group_task_answers WHERE leader_id = $1 AND task_id = $2',
                        [userId, taskId]
                    );
                    bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ó–∞–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.');
                    bot.sendMessage(userId, '–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç.');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.');
                }
            } else {
                bot.sendMessage(chatId, '–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º');
            }
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
            bot.deleteMessage(chatId, callbackQuery.message.message_id).catch((err) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            });
        }     
    }
});


bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (isAdmin(chatId)) {
        if (data === 'send_msg') {
            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.sendMessage(6489651322, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –∫—Ç–æ –í—ã, –ø–æ–º–µ–Ω—è–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–º—è. –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –°–º–µ–Ω–∏—Ç—å –∏–º—è');
        }
    }
});




//–ì—Ä—É–ø–ø—ã
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    if (isAdmin(chatId)) {

        if (data === 'create_group') {
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.');
            bot.once('message', async (groupNameMsg) => {
                const groupName = groupNameMsg.text.trim();

                try {
                    await dbClient.query(
                        `INSERT INTO groups (name) VALUES ($1)`,
                        [groupName]
                    );
                    bot.sendMessage(chatId, `–ì—Ä—É–ø–ø–∞ "${groupName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
                } catch (error) {
                    console.error(error);
                    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
                }
            });
        } else if (data === 'assign_leader') {
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
            try {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
                const groupsResult = await dbClient.query('SELECT DISTINCT groupname FROM users WHERE groupname IS NOT NULL');
                const groups = groupsResult.rows;

                if (groups.length === 0) {
                    return bot.sendMessage(chatId, '–ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
                }
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
                const groupButtons = groups.map((g) => ({
                    text: `${g.groupname}`,
                    callback_data: `select_group_${g.groupname}`
                }));


                const inlineKeyboard = {
                    inline_keyboard: [groupButtons]
                };

                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', { reply_markup: inlineKeyboard });
                bot.on('callback_query', async (callbackQuery) => {
                    const data = callbackQuery.data;
                    if (data.startsWith('select_group_')) {
                        const selectedGroup = data.replace('select_group_', '');

                        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
                        const usersResult = await dbClient.query(
                            'SELECT user_id, first_name, last_name FROM users WHERE groupname = $1',
                            [selectedGroup]
                        );

                        const users = usersResult.rows;

                        if (users.length === 0) {
                            return bot.sendMessage(chatId, '–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
                        }

                        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const userButtons = users.map((u) => ({
                            text: `${u.first_name} ${u.last_name}`,
                            callback_data: `assign_leader_${u.user_id}`
                        }));

                        const userKeyboard = {
                            inline_keyboard: [userButtons]
                        };

                        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã:', { reply_markup: userKeyboard });
                    }

                    if (data.startsWith('assign_leader_')) {
                        const userId = data.replace('assign_leader_', '');

                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ª–∏–¥–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
                        const userGroupResult = await dbClient.query('SELECT groupname FROM users WHERE user_id = $1', [userId]);
                        const userGroup = userGroupResult.rows[0].group;

                        await dbClient.query('UPDATE users SET is_leader = false WHERE groupname = $1', [userGroup]);

                        // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–∞
                        await dbClient.query('UPDATE users SET is_leader = true WHERE user_id = $1', [userId]);

                        bot.sendMessage(chatId, '–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!');
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–∞:', error);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–∞.');
            }
        } else if (data === 'add_group') {
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                const groups = await dbClient.query(`SELECT id, name FROM groups`);
                if (groups.rows.length === 0) {
                    return bot.sendMessage(chatId, '–ì—Ä—É–ø–ø—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.');
                }

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
                const groupOptions = groups.rows.map((group) => ({
                    text: group.name,
                    callback_data: `select_group_${group.id}_${group.name}`,
                }));

                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', {
                    reply_markup: {
                        inline_keyboard: groupOptions.map((option) => [option]),
                    },
                });
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
                bot.on('callback_query', async (query) => {
                    if (query.data.startsWith('select_group_')) {
                        const [, , groupIdStr, groupName] = query.data.split('_');
                        const groupId = parseInt(groupIdStr, 10);

                        if (isNaN(groupId)) {
                            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: ID –≥—Ä—É–ø–ø—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.');
                        }

                        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        const users = await dbClient.query(`SELECT user_id, first_name, last_name FROM users`);
                        if (users.rows.length === 0) {
                            return bot.sendMessage(chatId, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
                        }

                        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        const userOptions = users.rows.map((user) => ({
                            text: `${user.first_name} ${user.last_name}` || `ID ${user.user_id}`, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∏–ª–∏ ID
                            callback_data: `add_user_${groupId}_${user.user_id}_${groupName}`, // –ü–µ—Ä–µ–¥–∞–µ–º ID –≥—Ä—É–ø–ø—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                        }));

                        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:', {
                            reply_markup: {
                                inline_keyboard: userOptions.map((option) => [option]),
                            },
                        });
                    }

                    if (query.data.startsWith('add_user_')) {
                        const [, , groupIdStr, userIdStr, groupName] = query.data.split('_');
                        const groupId = parseInt(groupIdStr, 10);
                        const userId = parseInt(userIdStr, 10);

                        if (isNaN(groupId) || isNaN(userId)) {
                            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.');
                        }

                        try {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                            const result = await dbClient.query(
                                `UPDATE users SET group_id = $1, groupname = $2 WHERE user_id = $3`,
                                [groupId, groupName, userId]
                            ); 
                            

                            if (result.rowCount === 0) {
                                return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                            }

                            bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É "${groupName}".`);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É:', error);
                            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É.');
                        }
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.');
            }
        } else if (data === 'change_group') { 
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const usersResult = await dbClient.query('SELECT user_id, first_name, last_name, groupname FROM users');
                const users = usersResult.rows;

                if (users.length === 0) {
                    return bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userButtons = users.map((u) => ({
                    text: `${u.first_name} ${u.last_name} (${u.groupname || '–ù–µ—Ç'})`,
                    callback_data: `select_user_${u.user_id}`
                }));

                const userKeyboard = {
                    inline_keyboard: [userButtons]
                };

                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã:', { reply_markup: userKeyboard });

                bot.on('callback_query', async (callbackQuery) => {
                    const data = callbackQuery.data;

                    if (data.startsWith('select_user_')) {
                        const userId = data.replace('select_user_', '');

                        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                        const groupsResult = await dbClient.query('SELECT name, id FROM groups');
                        const groups = groupsResult.rows;

                        if (groups.length === 0) {
                            return bot.sendMessage(chatId, '–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
                        }

                        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
                        const groupButtons = groups.map((g) => ({
                            text: `${g.name}`,
                            callback_data: `change_group_${userId}_${g.name}_${g.id}`
                        }));

                        const groupKeyboard = {
                            inline_keyboard: [groupButtons]
                        };

                        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: groupKeyboard });
                    }

                    if (data.startsWith('change_group_')) {
                        const [_, , userId, newGroupname, group_id] = data.split('_');                      
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await dbClient.query('UPDATE users SET groupname = $1, is_leader = false, group_id = $2 WHERE user_id = $3', [newGroupname,group_id, userId]);

                        bot.sendMessage(chatId, '–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!');
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã:', error);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã.');
            }
        } else if (data === 'roulette_group') {
            bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø—ã –±–µ–∑ –ª–∏–¥–µ—Ä–∞
                const groupsWithoutLeaders = await dbClient.query(`
                    SELECT g.id AS group_id, u.user_id AS user_id, u.first_name, u.last_name
                    FROM groups g
                    JOIN users u ON u.group_id = g.id
                    WHERE g.leader_id IS NULL
                `);

                if (groupsWithoutLeaders.rowCount === 0) {                     
                    return bot.sendMessage(chatId, "–ù–µ—Ç –≥—Ä—É–ø–ø –±–µ–∑ –ª–∏–¥–µ—Ä–∞.");
                }

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
                const groups = groupsWithoutLeaders.rows.reduce((acc, row) => {
                    acc[row.group_id] = acc[row.group_id] || [];
                    acc[row.group_id].push({
                        user_id: row.user_id,
                        full_name: `${row.first_name} ${row.last_name || ''}`.trim(),
                    });
                    return acc;
                }, {});

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                for (const [groupId, users] of Object.entries(groups)) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ñ–∞–º–∏–ª–∏—è–º–∏
                    const candidates = users.map((user) => ({
                        text: `–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ ${user.full_name}`,
                        callback_data: `vote_${groupId}_${user.user_id}`,
                    }));

                    // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã
                    users.forEach((user) => {
                        bot.sendMessage(user.user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–∞ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:", {
                            reply_markup: {
                                inline_keyboard: candidates.map((candidate) => [candidate]),
                            },
                        });
                    });
                }

                bot.sendMessage(chatId, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ.");
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:", error.message);
                bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.");
            }
        }
    }
});

bot.on("callback_query", async (query) => {
    bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id
    }); 
    
    const [action, groupId, candidateId] = query.data.split("_");

    if (action === "vote") {
        const voterId = query.from.id;
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingVote = await dbClient.query(
                `SELECT * FROM group_votes WHERE group_id = $1 AND voter_id = $2`,
                [groupId, voterId]
            ); 

            if (existingVote.rowCount > 0) {
                return bot.sendMessage(voterId, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!" );
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
            await dbClient.query(
                `INSERT INTO group_votes (group_id, voter_id, candidate_id) VALUES ($1, $2, $3)`,
                [groupId, voterId, candidateId]
            );

            bot.sendMessage(voterId, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!"); 

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            const groupUsers = await dbClient.query(
                `SELECT COUNT(*) FROM users WHERE group_id = $1`,
                [groupId]
            );

            const totalVotes = await dbClient.query(
                `SELECT COUNT(*) FROM group_votes WHERE group_id = $1`,
                [groupId]
            );

            if (parseInt(groupUsers.rows[0].count) === parseInt(totalVotes.rows[0].count)) {
                // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                const result = await dbClient.query(
                    `
                SELECT candidate_id, COUNT(candidate_id) AS votes
                FROM group_votes
                WHERE group_id = $1
                GROUP BY candidate_id
                ORDER BY votes DESC
                LIMIT 1
            `,
                    [groupId]
                );

                const leaderId = result.rows[0].candidate_id;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –≥—Ä—É–ø–ø
                await dbClient.query(`UPDATE groups SET leader_id = $1 WHERE id = $2`, [
                    leaderId,
                    groupId,
                ]);
                //–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await dbClient.query(`UPDATE users SET is_leader = $1 WHERE user_id = $2`, [
                    true,
                    leaderId
                ]);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–∞
                bot.sendMessage(leaderId, "–í—ã —Å—Ç–∞–ª–∏ –ª–∏–¥–µ—Ä–æ–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã!");

                // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
                await dbClient.query(`DELETE FROM group_votes WHERE group_id = $1`, [groupId]);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞:", error.message);
            bot.sendMessage(query.id, {
                text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert: true,
            });
        }
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
const setBotCommands = async (bot) => {
    await bot.setMyCommands([
        { command: 'start', description: '–ù–∞—á–∞—Ç—å' }
    ]);
};

setBotCommands(bot);
